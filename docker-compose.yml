# version removed - obsolete in modern docker-compose

services:
  #==================================================#
  #                Postgres                          #
  #==================================================#
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${DB_POSTGRES_DB}
      POSTGRES_USER: ${DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro  # Commented out - file doesn't exist
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  #==================================================#
  #                Redis                             #
  #==================================================#
  redis:
    image: redis:8-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --tcp-keepalive 300
    ports:
      - "${DB_REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3

  # MCP Registry Gateway - Unified Architecture (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - DATABASE_URL=postgresql://${DB_POSTGRES_USER}:${DB_POSTGRES_PASSWORD}@postgres:${DB_POSTGRES_PORT}/${DB_POSTGRES_DB}
      - REDIS_URL=redis://${DB_REDIS_PASSWORD:+:}${DB_REDIS_PASSWORD}${DB_REDIS_PASSWORD:+@}redis:${DB_REDIS_PORT}/${DB_REDIS_DB}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      # Pass through all prefixed environment variables
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      # Database Settings
      - DB_POSTGRES_HOST=postgres
      - DB_POSTGRES_PORT=${DB_POSTGRES_PORT}
      - DB_POSTGRES_USER=${DB_POSTGRES_USER}
      - DB_POSTGRES_PASSWORD=${DB_POSTGRES_PASSWORD}
      - DB_POSTGRES_DB=${DB_POSTGRES_DB}
      - DB_POSTGRES_SSL_MODE=${DB_POSTGRES_SSL_MODE}
      - DB_REDIS_HOST=redis
      - DB_REDIS_PORT=${DB_REDIS_PORT}
      - DB_REDIS_PASSWORD=${DB_REDIS_PASSWORD}
      - DB_REDIS_DB=${DB_REDIS_DB}
      - DB_REDIS_SSL=${DB_REDIS_SSL}
      # Security Settings
      - SECURITY_JWT_SECRET_KEY=${SECURITY_JWT_SECRET_KEY}
      - SECURITY_JWT_ALGORITHM=${SECURITY_JWT_ALGORITHM}
      - SECURITY_JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${SECURITY_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - SECURITY_AZURE_TENANT_ID=${SECURITY_AZURE_TENANT_ID}
      - SECURITY_AZURE_CLIENT_ID=${SECURITY_AZURE_CLIENT_ID}
      - SECURITY_AZURE_CLIENT_SECRET=${SECURITY_AZURE_CLIENT_SECRET}
      - SECURITY_ENABLE_CORS=${SECURITY_ENABLE_CORS}
      - SECURITY_CORS_ORIGINS=${SECURITY_CORS_ORIGINS}
      - SECURITY_CORS_CREDENTIALS=${SECURITY_CORS_CREDENTIALS}
      # Service Settings
      - SERVICE_HOST=${SERVICE_HOST}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_WORKERS=${SERVICE_WORKERS}
      # FastMCP Settings
      - MREG_FASTMCP_ENABLED=${MREG_FASTMCP_ENABLED}
      - MREG_FASTMCP_PORT=${MREG_FASTMCP_PORT}
      - MREG_FASTMCP_HOST=${MREG_FASTMCP_HOST}
      - MREG_FASTMCP_OAUTH_CALLBACK_URL=${MREG_FASTMCP_OAUTH_CALLBACK_URL}
      - MREG_AZURE_TENANT_ID=${MREG_AZURE_TENANT_ID}
      - MREG_AZURE_CLIENT_ID=${MREG_AZURE_CLIENT_ID}
      - MREG_AZURE_CLIENT_SECRET=${MREG_AZURE_CLIENT_SECRET}
    ports:
      - "8000:8000" # Unified server (REST API + MCP)
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8000/health', timeout=5)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command:
      [
        "uv",
        "run",
        "mcp-gateway",
        "serve",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]

  # MCP Registry Gateway - Unified Architecture (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - DATABASE_URL=postgresql://${DB_POSTGRES_USER}:${DB_POSTGRES_PASSWORD}@postgres:${DB_POSTGRES_PORT}/${DB_POSTGRES_DB}
      - REDIS_URL=redis://${DB_REDIS_PASSWORD:+:}${DB_REDIS_PASSWORD}${DB_REDIS_PASSWORD:+@}redis:${DB_REDIS_PORT}/${DB_REDIS_DB}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - PYTHONPATH=/app/src
      # Pass through all prefixed environment variables
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      # Database Settings
      - DB_POSTGRES_HOST=postgres
      - DB_POSTGRES_PORT=${DB_POSTGRES_PORT}
      - DB_POSTGRES_USER=${DB_POSTGRES_USER}
      - DB_POSTGRES_PASSWORD=${DB_POSTGRES_PASSWORD}
      - DB_POSTGRES_DB=${DB_POSTGRES_DB}
      - DB_POSTGRES_SSL_MODE=${DB_POSTGRES_SSL_MODE}
      - DB_REDIS_HOST=redis
      - DB_REDIS_PORT=${DB_REDIS_PORT}
      - DB_REDIS_PASSWORD=${DB_REDIS_PASSWORD}
      - DB_REDIS_DB=${DB_REDIS_DB}
      - DB_REDIS_SSL=${DB_REDIS_SSL}
      # Security Settings
      - SECURITY_JWT_SECRET_KEY=${SECURITY_JWT_SECRET_KEY}
      - SECURITY_JWT_ALGORITHM=${SECURITY_JWT_ALGORITHM}
      - SECURITY_JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${SECURITY_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - SECURITY_AZURE_TENANT_ID=${SECURITY_AZURE_TENANT_ID}
      - SECURITY_AZURE_CLIENT_ID=${SECURITY_AZURE_CLIENT_ID}
      - SECURITY_AZURE_CLIENT_SECRET=${SECURITY_AZURE_CLIENT_SECRET}
      - SECURITY_ENABLE_CORS=${SECURITY_ENABLE_CORS}
      - SECURITY_CORS_ORIGINS=${SECURITY_CORS_ORIGINS}
      - SECURITY_CORS_CREDENTIALS=${SECURITY_CORS_CREDENTIALS}
      # Service Settings
      - SERVICE_HOST=${SERVICE_HOST}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_WORKERS=${SERVICE_WORKERS}
      # FastMCP Settings
      - MREG_FASTMCP_ENABLED=${MREG_FASTMCP_ENABLED}
      - MREG_FASTMCP_PORT=${MREG_FASTMCP_PORT}
      - MREG_FASTMCP_HOST=${MREG_FASTMCP_HOST}
      - MREG_FASTMCP_OAUTH_CALLBACK_URL=${MREG_FASTMCP_OAUTH_CALLBACK_URL:-http://localhost:8002/mcp/oauth/callback}
      - MREG_AZURE_TENANT_ID=${MREG_AZURE_TENANT_ID}
      - MREG_AZURE_CLIENT_ID=${MREG_AZURE_CLIENT_ID}
      - MREG_AZURE_CLIENT_SECRET=${MREG_AZURE_CLIENT_SECRET}
    ports:
      - "8002:8000" # Unified server (development port)
      - "5678:5678" # Debugger port
    volumes:
      # Mount backend source code for development
      - ./backend:/app
      # Exclude virtual environment (use container's)
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev
    command:
      [
        "uv",
        "run",
        "mcp-gateway",
        "serve",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    develop:
      watch:
        # Sync source code changes
        - action: sync
          path: ./backend/src
          target: /app/src
        - action: sync
          path: ./backend/tests
          target: /app/tests
        # Rebuild on dependency changes
        - action: rebuild
          path: ./backend/pyproject.toml
        - action: rebuild
          path: ./backend/uv.lock

volumes:
  postgres_data:
  redis_data:
