[project]
name = "mcp-registry-gateway"
version = "0.1.0"
description = "Enterprise MCP Registry, Gateway, and Proxy System"
authors = [{ name = "Jason Matherly", email = "jason@matherly.net" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10,<3.13"
keywords = ["mcp", "registry", "gateway", "proxy", "fastmcp", "fastapi", "enterprise"]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: System :: Distributed Computing",
]

dependencies = [
  # Core FastAPI and async support
  "fastapi[standard]>=0.114.2,<1.0.0",
  "uvicorn[standard]>=0.24.0",
  "python-multipart>=0.0.7,<1.0.0",
  # FastMCP integration
  "fastmcp>=0.4.0",
  # Database and storage
  "sqlmodel>=0.0.21,<1.0.0",
  "asyncpg>=0.30.0,<1.0.0",
  "psycopg[binary]>=3.1.13,<4.0.0",
  "alembic>=1.12.1,<2.0.0",
  "greenlet>=3.2.4,<4.0.0",
  "redis>=5.0.0",
  # Authentication and security
  "pyjwt[crypto]>=2.8.0,<3.0.0",
  "passlib[bcrypt]>=1.7.4,<2.0.0",
  "cryptography>=41.0.0",
  "python-jose[cryptography]>=3.3.0",
  # HTTP client and networking
  "httpx>=0.25.1,<1.0.0",
  "aiohttp>=3.9.0",
  "websockets>=12.0",
  # Configuration and environment
  "pydantic>=2.0,<3.0",
  "pydantic-settings>=2.2.1,<3.0.0",
  "python-dotenv>=1.0.0",
  # Monitoring and observability
  "prometheus-client>=0.19.0",
  "structlog>=23.2.0",
  # Distributed tracing
  "opencensus>=0.11.0",
  "opencensus-ext-azure>=1.1.13",
  "opentelemetry-api>=1.21.0",
  "opentelemetry-sdk>=1.21.0",
  # Background tasks and scheduling
  "celery>=5.3.0",
  # Note: beat package has compilation issues in Docker, removed for now
  # "beat>=0.2.0",
  # Platform-specific optimizations
  "uvloop>=0.19.0; sys_platform != 'win32'", # Better async performance on Unix
  # Utilities
  "tenacity>=8.2.3,<9.0.0",
  "click>=8.1.0",
  "rich>=13.7.0",
  "typer>=0.9.0",
]

[project.optional-dependencies]
# Monitoring and observability features
monitoring = [
  "sentry-sdk[fastapi]>=1.40.6,<2.0.0",
  "opentelemetry-api>=1.21.0",
  "opentelemetry-sdk>=1.21.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
  "opentelemetry-instrumentation-redis>=0.42b0",
]

# Docker utilities
docker = ["docker>=6.1.0"]

# All optional features
all = [
  "sentry-sdk[fastapi]>=1.40.6,<2.0.0",
  "opentelemetry-api>=1.21.0",
  "opentelemetry-sdk>=1.21.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
  "opentelemetry-instrumentation-redis>=0.42b0",
  "docker>=6.1.0",
]

[tool.uv]
# Specify default groups to install during development
default-groups = ["dev", "test", "lint", "docs"]
# Enable package mode (since we have a build system)
package = true
# Constrain resolution to common server/development platforms
# This optimizes dependency resolution and lockfile size
environments = [
  "sys_platform == 'linux'",  # Production servers (Docker/Linux)
  "sys_platform == 'darwin'", # Development (macOS)
  "sys_platform == 'win32'",  # Development (Windows)
]

[dependency-groups]
# Core development dependencies
dev = [{ include-group = "test" }, { include-group = "lint" }, { include-group = "docs" }]
# Testing dependencies
test = [
  "pytest>=7.4.3,<8.0.0",
  "pytest-asyncio>=0.21.1",
  "pytest-mock>=3.12.0",
  "pytest-cov>=4.1.0",
  "pytest-xdist>=3.5.0",
  "coverage>=7.4.3,<8.0.0",
]
# Code quality and linting
lint = [
  "ruff>=0.6.0,<1.0.0",
  "mypy>=1.8.0,<2.0.0",
  "black>=24.0.0",
  "pre-commit>=3.6.2,<4.0.0",
  # Type stubs
  "types-redis>=4.6.0",
  "types-pyjwt>=1.7.1",
  "types-requests>=2.32.4.20250809",
  "types-passlib>=1.7.7.20250602",
]
# Documentation dependencies
docs = ["mkdocs>=1.5.0", "mkdocs-material>=9.5.0", "mkdocstrings[python]>=0.24.0"]

[project.scripts]
mcp-gateway = "mcp_registry_gateway.cli:main"
mcp-demo = "mcp_registry_gateway.demo:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_registry_gateway"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/pyproject.toml"]

# Development tools configuration
# Mypy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Mypy overrides for external libraries without stubs
[[tool.mypy.overrides]]
module = [
  "fastmcp.*",
  "celery.*",
  "redis.*",
  "prometheus_client.*",
  "rich.*",
  "sqlalchemy.*",
  "sqlmodel.*",
  "pydantic.*",
  "fastapi.*",
  "uvicorn.*",
  "pydantic_settings.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Ruff configuration
[tool.ruff]
cache-dir = ".cache/ruff"
target-version = "py310"
line-length = 88
extend-exclude = [
  "migrations",
  ".venv",
  "venv",
  "build",
  "dist",
  "docs/example_files",
  "docs/fastmcp_docs",
]

# Ruff linting configuration
[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings  
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "RUF", # Ruff-specific rules
]
ignore = [
  "E501",   # line too long (handled by formatter)
  "B008",   # do not perform function calls in argument defaults
  "B904",   # Allow raising exceptions without from e
  "RUF012", # Mutable class attributes should be annotated with `ClassVar`
]
fixable = ["ALL"]
unfixable = []

# Ruff per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ARG", "S101"]
"*/__init__.py" = ["F401"]
"migrations/**/*.py" = ["ARG"]
"docs/**/*.py" = ["ALL"]

# Ruff pyupgrade configuration
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# Ruff isort configuration
[tool.ruff.lint.isort]
known-first-party = ["mcp_registry_gateway"]
force-single-line = false
lines-after-imports = 2

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["src/mcp_registry_gateway"]
omit = ["*/tests/*", "*/migrations/*", "*/__init__.py"]

# Coverage report configuration
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
show_missing = true
fail_under = 8

# Coverage HTML configuration
[tool.coverage.html]
directory = "test_reports/coverage_html"

# Black configuration
[tool.black]
target-version = ['py310']
line-length = 88
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv  
  | migrations
  | build
  | dist
)/
'''

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--cov=src/mcp_registry_gateway",
  "--cov-branch",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html:reports/coverage_html",
  "--cov-report=xml:reports/coverage.xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
  "security: marks tests as security-related tests",
]

[project.urls]
Homepage = "https://github.com/jrmatherly/mcp-manager"
Repository = "https://github.com/jrmatherly/mcp-manager"
Documentation = "https://github.com/jrmatherly/mcp-manager/blob/main/README.md"
Issues = "https://github.com/jrmatherly/mcp-manager/issues"
